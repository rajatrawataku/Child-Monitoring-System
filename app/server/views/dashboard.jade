doctype html
html
  head
    link(type='text/css', rel='stylesheet', href='/css/materialize.css', media='screen,projection')
    link(type='text/css', rel='stylesheet', href='/css/animate.css')
    link(type='text/css', rel='stylesheet', href='/css/main.css')
    link(type='text/css', rel='stylesheet', href='/css/mate_icon.css')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
  body(style='overflow-x: none;')
    #modal1.modal
      .modal-content
        .row
          .col.s12
            center
              h4 Room Settings 
              hr
          .col.s12
            .col.s4.offset-s2
              h5  Change Mode 
            .col.s4
              .switch.switch_div_mode(style='padding-top:17px;')
                label
                  | Manual
                  input(type='checkbox')
                  span.lever
                  |             Auto
              br
              br
            .col.s4.center.manual_control
              .card-panel
                span
                  | Light Controls
                  hr
                  .switch.switch_div_light(style='padding-top:17px;')
                    label
                      | Off
                      input(type='checkbox')
                      span.lever.switch_light
                      |             On
            .col.s4.center.manual_control
              .card-panel
                span
                  | Fan Controls
                  hr
                  .switch.switch_div_fan(style='padding-top:17px;')
                    label
                      | Off
                      input(type='checkbox')
                      span.lever.switch_fan
                      |             On

            .col.s4.center.manual_control
              .card-panel
                span
                  | Music Controls
                  hr
                  .switch.switch_div_music(style='padding-top:17px;')
                    label
                      | Off
                      input(type='checkbox')
                      span.lever.switch_music
                      |             On
              
    .main_frame
      #canvas
        #lf.lowerHalf_dash
          .row
            br
            br
            .col.l4.m12.s12
              .card
                .row
                  .col.s12.center
                    h5 Live Sound Intensity 
                    hr
                  //- .col.s12.center
                  //-   img(src='http://192.168.43.54:5000/video_feed',height="400",width="400")
                  .col.s12
                    #sound_div
                    // enter chart here
            .col.l4.m12.s12
              .card
                .row
                  .col.s12.center
                    h5 Live Room Temerature 
                    hr(width='400')
                  .col.s12
                    #temp_div

              
            .col.l4.m12.s12
              .card
                .row
                  .col.s12.center
                    h5 Live Darkness Level 
                    hr(width='400')
                  .col.s12
                    #light_div
           .col.l6.offset-l3.m12.s12
            .card
              .row
                .col.s12.center
                  h5 Live Video Feed
                  hr
                .col.s12.center
                  img(src='http://192.168.43.54:5000/video_feed',height="400",width="700")

        #upperHalf_dash.bgcolor.z-depth-5
          #bg
            #title_dash
              a.tooltipped(data-position='bottom', data-delay='50', data-tooltip='Know More, Do Better', style='color: white') Dashboard
            #room_setting
              a.waves-effect.waves-light.btn-small.modal-trigger(href='#modal1')
                i.material-icons.right settings_applications
                | Room Settings

    script(src='js/views/jquery.min.js')
    script(src='js/views/materialize.js')
    script(src='js/views/main.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery.form/4.2.2/jquery.form.js')
    script(src='https://code.highcharts.com/highcharts.js')
    script(src='https://code.highcharts.com/modules/series-label.js')
    script(src='https://code.highcharts.com/modules/exporting.js')
    script(type='text/javascript', src='//cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.5/socket.io.min.js')
    script.
        $(document).ready(function() {
          
          var sound_current_Value=0;
          var light_current_Value=0;
          var temp_current_Value=0;
          
          //- if(localStorage.getItem("current_fan_value")==null)
          //- {
          //-     localStorage.setItem("current_fan_value","0");
          //- }else {
          //-     if(localStorage.getItem("current_fan_value")){
          //-       $('.switch_fan').click();
          //-     }
          //- }
          //- 
          //- if(localStorage.getItem("current_light_value")==null)
          //- {
          //-     localStorage.setItem("current_light_value","0");
          //- }else {
          //-     if(localStorage.getItem("current_light_value")==1){
          //-       $('.switch_light').click();
          //-     }
          //- }
          //- 
          //- if(localStorage.getItem("current_music_value")==null)
          //- {
          //-     localStorage.setItem("current_music_value","0");
          //- }else {
          //-     if(localStorage.getItem("current_music_value")){
          //-       $('.switch_music').click();
          //-     }
          //- }

          // set initial values
          
          
          
          $(".switch_div_music").find("input[type=checkbox]").on("change",function() {
              var status = $(this).prop('checked');
              console.log(status);
              
              if(status)
              {
                  var input_data={'mode':'auto'};
                  $.ajax({
                    type: 'GET',
                    crossOrigin:true,

                    contentType: 'application/json',

                    url: 'http://192.168.43.121:5008/play',

                    success: function(result) {
                      console.log(result);
                    },error:function(err){
                      console.log(err);
                    }
                  });
                
              } else {
                
                var input_data={'mode':'manual'};

                $.ajax({
                  type: 'GET',
                  crossOrigin:true,
                  contentType: 'application/json',
                  url: 'http://192.168.43.121:5008/closePlay',
                  success: function(result) {
                    console.log(result);
                  },error:function(err){
                    console.log('boo sound nahi aaya');
                  }
                });
                
              }
          });

          
          $(".switch_div_mode").find("input[type=checkbox]").on("change",function() {
              var status = $(this).prop('checked');
              console.log(status);
              
              if(status)
              {
                  var input_data={'mode':'auto'};
                  $.ajax({
                    type: 'POST',
                    
                    data: JSON.stringify(input_data),

                    crossOrigin:true,

                    contentType: 'application/json',

                    url: 'http://192.168.43.121:3000/setMode',

                    success: function(result) {
                      console.log(result);
                      
                      $('.manual_control').css('display','none');

                    },error:function(err){
                      console.log(err);
                    }
                  });
                
              } else {
                
                var input_data={'mode':'manual'};

                $.ajax({
                  type: 'POST',

                  crossOrigin:true,
                  data: JSON.stringify(input_data),

                  contentType: 'application/json',

                  url: 'http://192.168.43.121:3000/setMode',

                  success: function(result) {
                    console.log(result);
                    $('.manual_control').css('display','block');
                  },error:function(err){

                  }
                });
                
              }
          });

          
          $(".switch_div_light").find("input[type=checkbox]").on("change",function() {
              var status = $(this).prop('checked');
              console.log(status);
              
              if(status)
              {
                  $.ajax({
                    type: 'GET',

                    crossOrigin:true,

                    contentType: 'application/json',

                    url: 'http://192.168.43.57:5005/turnLightON',

                    success: function(result) {

                    },error:function(err){

                    }
                  });
                
              } else {
                
                $.ajax({
                  type: 'GET',

                  crossOrigin:true,


                  contentType: 'application/json',

                  url: 'http://192.168.43.57:5005/turnLightOFF',

                  success: function(result) {

                  },error:function(err){

                  }
                });
                
              }
          });
          
          $(".switch_div_fan").find("input[type=checkbox]").on("change",function() {
              var status = $(this).prop('checked');
              console.log(status);
              
              if(status)
              {
                  $.ajax({
                    type: 'GET',

                    crossOrigin:true,

                    contentType: 'application/json',

                    url: 'http://192.168.43.57:5005/turnFanON',

                    success: function(result) {

                    },error:function(err){

                    }
                  });
                
              } else {
                
                $.ajax({
                  type: 'GET',

                  crossOrigin:true,


                  contentType: 'application/json',

                  url: 'http://192.168.43.57:5005/turnFanOFF',

                  success: function(result) {

                  },error:function(err){

                  }
                });
                
              }
          });

          
          var current_fan_value=localStorage.getItem("current_fan_value");
          var current_music_value=localStorage.getItem("current_music_value");
          
          
          // Graph Sound Function
          function soundIntensityGraphFunction(){
            
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });

            Highcharts.chart('sound_div', {
                chart: {
                    type: 'spline',
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    events: {
                        load: function () {
                            // set up the updating of the chart each second
                            var series = this.series[0];
                            setInterval(function () {
                              
                              $.ajax({
                                type: 'GET',

                                crossOrigin:true,

                                contentType: 'application/json',

                                url: 'http://192.168.43.134:5011/getSound',

                                success: function(result) {
                                  console.log(result);
                                  var x = (new Date()).getTime(), // current time
                                      y = parseFloat(result);
                                  series.addPoint([x, y], true, true);

                                },error:function(err){

                                }
                              });

                              
                                
                                var x = (new Date()).getTime(), // current time
                                    y = sound_current_Value;
                                series.addPoint([x, y], true, true);
                            }, 2000);
                        }
                    }
                },
                title: {
                    text: 'Sound Level'
                },
                xAxis: {
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    title: {
                        text: 'Value'
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return '<b>' + this.series.name + '</b><br/>' +
                            Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                            Highcharts.numberFormat(this.y, 2);
                    }
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                series: [{
                    name: 'Sound Level',
                    data: (function () {
                        // generate an array of random data
                        var data = [],
                            time = (new Date()).getTime(),
                            i;

                        for (i = -19; i <= 0; i += 1) {
                            data.push({
                                x: time + i * 1000,
                                y: 6
                            });
                        }
                        return data;
                    }())
                }]
            });                        
          }
          
          //  Temperature Graph Function
          
          function temperatureGraphFunction()
          {
            
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });

            Highcharts.chart('temp_div', {
                chart: {
                    type: 'spline',
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    events: {
                        load: function () {
                          
                          
                            // set up the updating of the chart each second
                            var series = this.series[0];
                            setInterval(function () {
                                
                              $.ajax({
                                type: 'GET',

                                crossOrigin:true,

                                contentType: 'application/json',

                                url: 'http://192.168.43.57:5005/getTemp',

                                success: function(result) {
                                    
                                  var x = (new Date()).getTime(), // current time
                                      y = result.response;
                                  series.addPoint([x, y], true, true);

                                },error:function(err){

                                }
                              });

                              
                            }, 2000);
                        }
                    }
                },
                title: {
                    text: 'Room Temperature'
                },
                xAxis: {
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    title: {
                        text: 'Value'
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return '<b>' + this.series.name + '</b><br/>' +
                            Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                            Highcharts.numberFormat(this.y, 2);
                    }
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                series: [{
                    name: 'Room Temperature',
                    data: (function () {
                        // generate an array of random data
                        var data = [],
                            time = (new Date()).getTime(),
                            i;

                        for (i = -19; i <= 0; i += 1) {
                            data.push({
                                x: time + i * 1000,
                                y: 25
                            });
                        }
                        return data;
                    }())
                }]
            }); 
            
          }
          
          
          // Graph function Light Intensity
          
          function lightIntensityGraphFunction()
          {
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });

            Highcharts.chart('light_div', {
                chart: {
                    type: 'spline',
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    events: {
                        load: function () {
                            // set up the updating of the chart each second
                            var series = this.series[0];
                            setInterval(function () {
                              
                              $.ajax({
                                type: 'GET',

                                crossOrigin:true,

                                contentType: 'application/json',

                                url: 'http://192.168.43.57:5005/getLDR',

                                success: function(result) {
                                    
                                  var x = (new Date()).getTime(), // current time
                                      y = result.response;
                                  series.addPoint([x, y], true, true);

                                },error:function(err){

                                }
                              });

                              
                            }, 2000);
                        }
                    }
                },
                title: {
                    text: 'Darkness Level'
                },
                xAxis: {
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    title: {
                        text: 'Value'
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return '<b>' + this.series.name + '</b><br/>' +
                            Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                            Highcharts.numberFormat(this.y, 2);
                    }
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                series: [{
                    name: 'Darkness Level',
                    data: (function () {
                        // generate an array of random data
                        var data = [],
                            time = (new Date()).getTime(),
                            i;

                        for (i = -19; i <= 0; i += 1) {
                            data.push({
                                x: time + i * 1000,
                                y: 700
                            });
                        }
                        return data;
                    }())
                }]
            }); 
            
          }
          
        
          
          lightIntensityGraphFunction();
          temperatureGraphFunction();
          soundIntensityGraphFunction();


        });

      
