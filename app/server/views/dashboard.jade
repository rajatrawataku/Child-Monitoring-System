doctype html
html
  head
    link(type='text/css', rel='stylesheet', href='/css/materialize.css', media='screen,projection')
    link(type='text/css', rel='stylesheet', href='/css/animate.css')
    link(type='text/css', rel='stylesheet', href='/css/main.css')
    link(type='text/css', rel='stylesheet', href='/css/mate_icon.css')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
  body(style='overflow-x: none;')
    #modal1.modal
      .modal-content
        .row
          .col.s12
            center
              h4 Room Settings 
              hr
          .col.s12
            .col.s4.offset-s2
              h5  Change Mode 
            .col.s4
              .switch(style='padding-top:17px;')
                label
                  | Manual
                  input(type='checkbox')
                  span.lever
                  |             Auto
              br
              br
            .col.s4.center
              .card-panel
                span
                  | Light Controls
                  hr
                  .switch(style='padding-top:17px;')
                    label
                      | On
                      input(type='checkbox')
                      span.lever
                      |             Off
            .col.s4.center
              .card-panel
                span
                  | Fan Controls
                  hr
                  .switch(style='padding-top:17px;')
                    label
                      | On
                      input(type='checkbox')
                      span.lever
                      |             Off

            .col.s4.center
              .card-panel
                span
                  | Music Controls
                  hr
                  .switch(style='padding-top:17px;')
                    label
                      | On
                      input(type='checkbox')
                      span.lever
                      |             Off
              
    .main_frame
      #canvas
        #lf.lowerHalf_dash
          .row
            br
            br
            .col.l4.m12.s12
              .card
                .row
                  .col.s12.center
                    h5 Live Sound Intensity 
                    hr(width='400')
                  .col.s12
                    #sound_div
                    // enter chart here
            .col.l4.m12.s12
              .card
                .row
                  .col.s12.center
                    h5 Live Room Temerature 
                    hr(width='400')
                  .col.s12
                    #temp_div

              
            .col.l4.m12.s12
              .card
                .row
                  .col.s12.center
                    h5 Live Light Intensity 
                    hr(width='400')
                  .col.s12
                    #light_div

        #upperHalf_dash.bgcolor.z-depth-5
          #bg
            #title_dash
              a.tooltipped(data-position='bottom', data-delay='50', data-tooltip='Know More, Do Better', style='color: white') Dashboard
            #room_setting
              a.waves-effect.waves-light.btn-small
                i.material-icons.right settings_applications
                | Room Settings

    script(src='js/views/jquery.min.js')
    script(src='js/views/materialize.js')
    script(src='js/views/main.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery.form/4.2.2/jquery.form.js')
    script(src='https://code.highcharts.com/highcharts.js')
    script(src='https://code.highcharts.com/modules/series-label.js')
    script(src='https://code.highcharts.com/modules/exporting.js')
    script(type='text/javascript', src='//cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.5/socket.io.min.js')
    script.
        $(document).ready(function() {
          
          var sound_current_Value=0;
          var light_current_Value=0;
          var temp_current_Value=0;
          
          
          
          // Graph Sound Function
          function soundIntensityGraphFunction(){
            
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });

            Highcharts.chart('sound_div', {
                chart: {
                    type: 'spline',
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    events: {
                        load: function () {
                            // set up the updating of the chart each second
                            var series = this.series[0];
                            setInterval(function () {
                                var x = (new Date()).getTime(), // current time
                                    y = sound_current_Value;
                                series.addPoint([x, y], true, true);
                            }, 2000);
                        }
                    }
                },
                title: {
                    text: 'Live Sound Level'
                },
                xAxis: {
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    title: {
                        text: 'Value'
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return '<b>' + this.series.name + '</b><br/>' +
                            Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                            Highcharts.numberFormat(this.y, 2);
                    }
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                series: [{
                    name: 'Sound Level',
                    data: (function () {
                        // generate an array of random data
                        var data = [],
                            time = (new Date()).getTime(),
                            i;

                        for (i = -19; i <= 0; i += 1) {
                            data.push({
                                x: time + i * 1000,
                                y: 0.2
                            });
                        }
                        return data;
                    }())
                }]
            });                        
          }
          
          //  Temperature Graph Function
          
          function temperatureGraphFunction()
          {
            
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });

            Highcharts.chart('temp_div', {
                chart: {
                    type: 'spline',
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    events: {
                        load: function () {
                            // set up the updating of the chart each second
                            var series = this.series[0];
                            setInterval(function () {
                                var x = (new Date()).getTime(), // current time
                                    y = temp_current_Value;
                                series.addPoint([x, y], true, true);
                            }, 2000);
                        }
                    }
                },
                title: {
                    text: 'Live Room Temperature'
                },
                xAxis: {
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    title: {
                        text: 'Value'
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return '<b>' + this.series.name + '</b><br/>' +
                            Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                            Highcharts.numberFormat(this.y, 2);
                    }
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                series: [{
                    name: 'Room Temperature',
                    data: (function () {
                        // generate an array of random data
                        var data = [],
                            time = (new Date()).getTime(),
                            i;

                        for (i = -19; i <= 0; i += 1) {
                            data.push({
                                x: time + i * 1000,
                                y: 0.2
                            });
                        }
                        return data;
                    }())
                }]
            }); 
            
          }
          
          // Graph function Light Intensity
          
          function lightIntensityGraphFunction()
          {
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });

            Highcharts.chart('light_div', {
                chart: {
                    type: 'spline',
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    events: {
                        load: function () {
                            // set up the updating of the chart each second
                            var series = this.series[0];
                            setInterval(function () {
                                var x = (new Date()).getTime(), // current time
                                    y = light_current_Value;
                                series.addPoint([x, y], true, true);
                            }, 2000);
                        }
                    }
                },
                title: {
                    text: 'Light Intensity'
                },
                xAxis: {
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    title: {
                        text: 'Value'
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return '<b>' + this.series.name + '</b><br/>' +
                            Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                            Highcharts.numberFormat(this.y, 2);
                    }
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                series: [{
                    name: 'Light Intensity',
                    data: (function () {
                        // generate an array of random data
                        var data = [],
                            time = (new Date()).getTime(),
                            i;

                        for (i = -19; i <= 0; i += 1) {
                            data.push({
                                x: time + i * 1000,
                                y: 0.2
                            });
                        }
                        return data;
                    }())
                }]
            }); 
            
          }
          
          
          function soundIntensityLevel(){
            
            
            console.log('Sound Intensity active');

            var socket = io.connect('http://192.168.43.121:5000');
            socket.on('connect', function() {
                socket.emit('my_event', {data: 'I\'m connected!'});
            });

            socket.emit('my_ping');
            
            setInterval(()=>{
              socket.emit('maintain');
            },2000)
            
            socket.on("maintain2",function(){
              console.log("maintaining connection ....")
            })

            socket.on('my_pong', function(message) {
                console.log(message.data)
                sound_current_Value=message.data;
            });
          
          }
          
          function temperatuteIntesityLevel(){
            
            console.log('Temperature is active');
            
            var socket = io.connect('http://192.168.43.121:5001');
            socket.on('connect', function() {
                socket.emit('my_event', {data: 'I\'m connected!'});
            });
              
            setInterval(()=>{
            socket.emit('my_ping');
            },2000)

            setInterval(()=>{
            socket.emit('maintain');
            },2000)

            socket.on("maintain2",function(){
            console.log("maintaining connection ....")
            })
            
            socket.on('my_pong', function(message) {
                console.log(message.data)
                temp_current_Value=message.data;
            });
            
          }
          
          function lightIntensityLevel(){
            
            console.log('Light Intensity active');

            
            var socket = io.connect('http://192.168.43.121:5002');
            socket.on('connect', function() {
                socket.emit('my_event', {data: 'I\'m connected!'});
            });
              
            setInterval(()=>{
            socket.emit('my_ping');
            },2000)

            setInterval(()=>{
            socket.emit('maintain');
            },2000)

            socket.on("maintain2",function(){
            console.log("maintaining connection ....")
            })
            
            socket.on('my_pong', function(message) {
                console.log(message.data)
                light_current_Value=message.data;
            });
            
          }

          //-  calling light function
          lightIntensityLevel();
          lightIntensityGraphFunction();    
          
          // calling sound function
          soundIntensityLevel();
          soundIntensityGraphFunction();
          
          // calling temperatur function 
          temperatuteIntesityLevel();
          temperatureGraphFunction();
          
        });

      
